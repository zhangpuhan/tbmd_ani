torch_data_set = Data.TensorDataset(coordinate_temp, energy_temp, force_temp)
loader = Data.DataLoader(
    dataset=torch_data_set,
    batch_size=64,
    shuffle=True
)

net = Net()
optimizer = torch.optim.Adam(net.parameters(), lr=0.001)
loss_func = torch.nn.MSELoss()


for epoch in range(50):
    for step, (coordinate, energy, force) in enumerate(loader):
        coordinate.requires_grad_(True)
        print(energy.size())
        print(coordinate.size()[0])

        optimizer.zero_grad()
        x_temp = torch.reshape(aev_computer(coordinate[0]), (1, -1))
        for i in range(1, coordinate.size()[0]):
            x_temp = torch.cat((x_temp, torch.reshape(aev_computer(coordinate[i]), (1, -1))))
        print(x_temp.size())

        prediction_temp = net(x_temp.float())
        predict_energy = torch.sum(prediction_temp, dim=1, keepdim=True)
        print(predict_energy)
        loss_1 = loss_func(predict_energy, energy.float())
        loss_1.backward(retain_graph=True)

        # prediction = torch.autograd.grad(prediction_temp.sum(), batch_x, create_graph=True)
        # loss_2 = 20.0 * loss_func(-prediction[0], batch_y)
        print('Epoch: ', epoch, '| Step: ', step, '| loss: ', loss_1.data.numpy())
        optimizer.step()


for epoch in range(50):
    for step, (coordinate, energy, force) in enumerate(loader):
        coordinate.requires_grad_(True)
        print(energy.size())
        print(coordinate.size()[0])

        optimizer.zero_grad()
        x_temp = torch.reshape(aev_computer(coordinate[0]), (1, -1))
        for i in range(1, coordinate.size()[0]):
            x_temp = torch.cat((x_temp, torch.reshape(aev_computer(coordinate[i]), (1, -1))))
        print(x_temp.size())

        prediction_temp = net(x_temp.float())
        predict_energy = torch.sum(prediction_temp, dim=1, keepdim=True)
        print(predict_energy)
        loss_1 = loss_func(predict_energy, energy.float())
        loss_1.backward(retain_graph=True)
        print(torch.autograd.grad(torch.sum(torch.sum(prediction_temp, dim=1, keepdim=True)[0]), coordinate))

        # prediction = torch.autograd.grad(prediction_temp.sum(), batch_x, create_graph=True)
        # loss_2 = 20.0 * loss_func(-prediction[0], batch_y)
        print('Epoch: ', epoch, '| Step: ', step, '| loss: ', loss_1.data.numpy())
        optimizer.step()


# works
    for step, (coordinate, energy, force) in enumerate(loader):
        temp_coordinate = coordinate[0].requires_grad_(True)
        print(energy)
        print(temp_coordinate.size()[0])

        optimizer.zero_grad()

        x_temp = aev_computer(temp_coordinate)

        energy_prediction_temp = net.forward(x_temp.float())
        energy_prediction = torch.sum(energy_prediction_temp)
        print(energy_prediction)

        # loss_1 = loss_func(energy_prediction, torch.sum(energy).float())
        # loss_1.backward(retain_graph=True)

        force_prediction = -torch.autograd.grad(energy_prediction, temp_coordinate, create_graph=True)[0]

        # loss_2 = loss_func(force_prediction, force[0])
        # print(force_prediction.float())
        loss = loss_func(force_prediction.float(), force[0].float())

        # print('Epoch: ', epoch, '| Step: ', step, '| loss_1: ', loss_1)
        print('Epoch: ', epoch, '| Step: ', step, '| loss: ', loss)
        print("******************************************")

        loss.backward()
        optimizer.step()
